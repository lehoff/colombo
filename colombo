#!/usr/local/bin/escript
%%% -*- erlang -*-

-compile(export_all).

config_file() -> "./.colombo/config".

lib_dir() ->
    {ok, Cwd} = file:get_cwd(),
    Cwd ++ "/lib".
    

get_repo(RepoUrl) ->
    RepoName = repo_name(RepoUrl),
    case filelib:is_dir(RepoName) of
        false ->
            Cmd = io_lib:format("git clone ~s", [RepoUrl]),
            io:format("Executing: ~s~n", [Cmd]),
            os:cmd(Cmd);
        true ->
            Cwd = cd1(RepoName),
            Cmd = "git pull",
            io:format("Executing: ~s in ~s~n", [Cmd, Cwd ++ "/" ++ RepoName]),%%RepoName]),
            os:cmd(Cmd),
            ok = file:set_cwd(Cwd)
    end.

cd1(Dir) ->
    {ok, Cwd} = file:get_cwd(),
    SubDir = (Cwd ++ "/" ++ Dir),
    ok = file:set_cwd(SubDir),
    Cwd.




main(["show-config"]) ->
    ConfigFile = config_file(),
    case filelib:is_file(ConfigFile) of
        true ->
            {ok, Bin} = file:read_file(ConfigFile),
            io:format("~s~n", [Bin]);
        false ->
            io:format("No config created - use 'colombo init' to create one~n", [])
    end;
main(["init"]) ->
    ConfigFile = config_file(),
    filelib:ensure_dir(ConfigFile),
    %% @todo add checking for existing config file.
    {ok, File} = file:open(ConfigFile, [write]),
    ok = file:close(File);
main(["add-repo", "--force", Repo]) ->
    RepoName = repo_name(Repo),
    ok = delete_dir(RepoName),
    remove_repo_from_config(RepoName),
    main(["add-repo", Repo]);
main(["add-repo", Repo]) ->
    RepoMap = repo_map(),
    RepoName = repo_name(Repo),
    case lists:keyfind(RepoName, 1, RepoMap) of
        {RepoName, ExistingUrl} ->
            io:format("Application ~s is already added as ~s~n",
                      [RepoName, ExistingUrl]),
            io:format("Use 'add-repo --force' to overwrite.~n", []);
        false ->
            ConfigFile = config_file(),
            {ok, File} = file:open(ConfigFile, [append]),
            ok = append_repo(File, Repo),
            ok = file:close(File),
            io:format("Added ~s~n", [Repo])
    end;
main(["select", RepoName, "tag", Tag]) ->
    Terms = config_terms(),
    {Select, BaseTerms} = lists:partition( fun({select,_}) -> true;
                                                (_) -> false
                                             end,
                                             Terms),
    SelectList = proplists:get_value(select, Select, []),
    NewSelectList = lists:keystore(RepoName, 1, SelectList, {RepoName, {tag, Tag}}),
    NewTerms = [{select,NewSelectList} | BaseTerms],
    ConfigFile = config_file(),
    {ok, File} = file:open(ConfigFile, [write]),
    write_terms(File, NewTerms),
    ok = file:close(File),
    io:format("Changed ~s to use {tag, ~s}~n",
              [RepoName, Tag]);
main(["checkout"]) ->
    Terms = config_terms(),
    SelectList = proplists:get_value(select, Terms, []),
    [ checkout_repo(RepoName, Selection) ||
        {RepoName, Selection} <- SelectList],
    io:format("checkout completed~n", []);
main(["checkout", RepoName]) ->
    Terms = config_terms(),
    SelectList = proplists:get_value(select, Terms, []),
    Selection = proplists:get_value(RepoName, SelectList, {branch, "master"}),  
    ok = checkout_repo(RepoName, Selection),
    io:format("checkout ~p for ~s completed~n", [Selection, RepoName]);
main(["delete-repo", RepoName]) ->
    ok = delete_dir(RepoName),
    ok = remove_repo_from_config(RepoName),
    io:format("Removed ~s from config~n", [RepoName]);
main(["get-repo", RepoName]) ->
    RepoMap = repo_map(),
    case proplists:get_value(RepoName, RepoMap) of
        RepoURL ->
            get_repo(RepoURL);
        undefined ->
            io:format("'get-repo' for unknown repao ~s~n", [RepoName])
    end;
main(["get-repos"]) ->
    Repos = config_repos(url),
    io:format("get-repos with Repos=~p~n", [Repos]),
    _ = [ get_repo(R)  || R <- Repos];
main(["rebar-deps", RebarConfig]) ->
    Repos = rebar_deps(RebarConfig),
    [ io:format("~s~n", [Repo]) || Repo <- Repos ];
main(["get-deps"]) ->
    io:format("preparing to resolve depedencies by doing 'get-repos'~n", []),
    main(["get-repos"]),
    DepMap = dependency_map(),
    RepoMap = repo_map(),
    Missing = orddict:fetch_keys(DepMap) -- orddict:fetch_keys(RepoMap),
    case Missing of
        [] ->
            ok;
        _ ->
            io:format("Missing: ~p~n", [Missing]),
            [ main(["add-repo", orddict:fetch(M, DepMap)])
              || M <- Missing ],
            main(["get-repos"]),
            main(["get-deps"])
    end;
main(["app-deps", RepoName]) ->
    case app_dependencies(RepoName) of
        [] ->
            io:format("~s has no dependencies.~n", [RepoName]);
        Repos ->
            DepNames =
                case [repo_name(Url) || {repo, Url} <- Repos] of
                    [] ->
                        Repos;
                    List ->
                        List
                end,
            DepStr = string:join(DepNames, ", "),
            io:format("~s depends on: ~s~n", [RepoName, DepStr])
    end;
main(["list-repos"]) ->
    RepoMap = repo_map(),
    io:format("colombo has the following repos in its configuration:~n", []),
    [ io:format("~s: ~s~n", [RepoName, RepoUrl])
      || {RepoName, RepoUrl} <- RepoMap];
%% main(["set-erllibs", Dir]) ->
%%     ErllibsDir = {erl_libs, Dir},
%%     ConfigFile = config_file(),
%%     {ok, Terms} = file:consult(ConfigFile),
%%     NewTerms = lists:keystore(erl_libs, 1, Terms, ErllibsDir),
%%     {ok, File} = file:open(ConfigFile, [write]),
%%     ok =write_terms(File, NewTerms),
%%     io:format("changed erl_libs to ~p~n", [Dir]);
main(["install-sinan", RepoName]) ->
    %% @todo find non-Unix OS way of doing this
    {ok, Cwd} = file:get_cwd(),
    SrcDir = string:join([Cwd, RepoName, 
                          "_build", RepoName,
                          "lib", RepoName ++ "*"],
                         "/"),
    LibDir = lib_dir(),
    Cmd = io_lib:format("cp -r ~s ~s", [SrcDir, LibDir]),
    os:cmd(Cmd),
    io:format("Installed ~s in ~s~n", [RepoName, LibDir]);
main(["install-otp", "--all"]) ->
    RepoNames = repo_names(),
    [ main (["install-otp", RepoName]) || RepoName <- RepoNames ],
    io:format("done with 'install-otp-all'~n", []);
main(["install-otp", RepoName]) ->
    %% @todo find non-Unix OS way of doing this
    {ok, Cwd} = file:get_cwd(),
    SrcDir = string:join([Cwd, RepoName],
                         "/"),
    LibDir = lib_dir(),
    ensure_dir(LibDir),
    Vsn = extract_version(RepoName),
    Target = io_lib:format("~s/~s-~s", [LibDir, RepoName, Vsn]),
    ok = ensure_dir(Target),
    io:format("Created target ~s~n", [Target]),
    Cmds = [ io_lib:format("cp -r ~s/~s ~s/~s",
                           [SrcDir, SubDir, Target, SubDir])
             || SubDir <- ["ebin", "include", "src"]
           ],
    [ os:cmd(Cmd) || Cmd <- Cmds ],
    io:format("Installed OTP project ~s in ~s~n", [RepoName, LibDir]);
main(["build", RepoName]) ->
    io:format("Preparing build by doing checkout for ~s~n", [RepoName]),
    main(["checkout", RepoName]),
    create_emakefile(RepoName),
    Cwd = cd1(RepoName),
    ensure_dir("ebin"),
    Cmd = "erl -make",
    io:format("Executing '~s' for ~s~n", [Cmd, RepoName]),
    os:cmd(Cmd),
    ok = file:set_cwd(Cwd);
main(["build-all"]) ->
    RepoNames = repo_names(),
    [ main(["build", RepoName]) || RepoName <- RepoNames ],
    io:format("done with 'build-all'~n", []);
main(["create-emakefile", RepoName]) ->
    ok = create_emakefile(RepoName);
main(["version", RepoName]) ->
    io:format("~s is at version ~p~n", [RepoName, extract_version(RepoName)]).
%% main(["pick", RepoName, "tag", Tag]) ->
%%     Cwd = cd1(RepoName),
%%     Cmd = "git checkout " ++ Tag
        
%%     ok = file:set_cwd(Cwd).
    

checkout_repo(RepoName, {tag, Tag}) ->
    checkout_raw(RepoName, Tag);
checkout_repo(RepoName, {branch, Branch}) ->
    checkout_raw(RepoName, Branch).

checkout_raw(RepoName, Tag) ->
    Cwd = cd1(RepoName),
    Cmd = "git checkout " ++ Tag,
    os:cmd(Cmd),
    io:format("Executed '~s' in ~s~n", [Cmd, RepoName]),
    ok = file:set_cwd(Cwd).

ensure_dir(Dir) ->
    case filelib:is_dir(Dir) of
        true ->
            ok;
        false ->
            ok = file:make_dir(Dir)
    end.

-spec extract_version(RepoName::string()) -> string().
extract_version(RepoName) ->
    AppFile = find_app_file(RepoName),
    Terms = app_file_terms(AppFile),
    case proplists:get_value(vsn, Terms) of
        V when is_list(V) ->
            V;
        {cmd, Cmd} ->
            Cwd = cd1(RepoName),
            Vsn = os:cmd(Cmd),
            ok = file:set_cwd(Cwd),
            Vsn;
        Other ->
            io:format("~s vsn is not a string: ~p - using 0.0.1~n",
                      [RepoName, Other]),
            "0.0.1"
    end.

create_emakefile(RepoName) ->
    Cwd = cd1(RepoName),
    case filelib:is_regular("Emakefile") of
        true ->
            io:format("Emakefile already in place.~n");
        false ->
            Rule = {'src/*', [{outdir, "ebin"},{i, "include"}, {i, "src"}]},
            io:format("Creating Emakefile for ~s~n", [RepoName]),
            {ok, File} = file:open("Emakefile", [write]),
            write_term_to_file(File, Rule),
            ok = file:close(File)
    end,
    ok = file:set_cwd(Cwd).


append_repo(File, Repo) ->
    %% @todo rewrite this to use write_term_to_file
    file:write(File, io_lib:format("{repo, \"~s\"}.~n", [Repo])).

write_term_to_file(File, Term) ->
    file:write(File, io_lib:format("~p.~n", [Term])).

-spec config_repos('url'|'name') -> [string()].
config_repos(url) ->
    Terms = config_terms(),
    %%    io:format("config_repos Terms=~p~n", [Terms]),
    [R || {repo,R} <- Terms];
config_repos(name) ->
    Urls = config_repos(url),
    [ repo_name(Url) || Url <- Urls].

config_terms() ->
    ConfigFile = config_file(),
    {ok, Terms} = file:consult(ConfigFile),
    Terms.

rebar_deps(RebarConfig) ->
    {ok, Terms} = file:consult(RebarConfig),
%%    io:format("rebar_deps Terms=~p~n", [Terms]),
    RebarDeps = proplists:get_value(deps, Terms, []),
    [Repo || {_, _, {git, Repo, _}} <- RebarDeps].


repo_names() ->
    RepoUrls = config_repos(url),
    [ repo_name(RepoUrl) || RepoUrl <- RepoUrls].

repo_name(Url) ->
    Last = lists:last(string:tokens(Url, "/")),
    [RepoName | _ ] = string:tokens(Last, "."),
    RepoName.
    
-spec dependencies('url'|'name') -> [string()].
dependencies(url) ->
    RepoNames = repo_names(),
%%    io:format("RepoNames: ~p~n", [RepoNames]),
    Sorted =
        lists:sort(lists:flatten([app_dependencies(RepoName)
                                  || RepoName <- RepoNames])),
    [ Dep || {repo, Dep} <- Sorted ];
dependencies(name) ->
    Urls = dependencies(url),
    [ repo_name(Url) || Url <- Urls].

-spec find_app_file(RepoName::string()) -> FileName::string().
find_app_file(RepoName) ->
    RepoPath = "./" ++ RepoName ++ "/",
    AppFile = (RepoPath ++ "ebin/" ++ RepoName ++ ".app"),
    AppSrcFile = (RepoPath ++ "src/" ++ RepoName ++ ".app.src"),
    case {filelib:is_regular(AppFile), filelib:is_regular(AppSrcFile)} of
        {true, true} ->
            io:format("Both .app and .app.src exists for ~s "
                      ++ "- using .app.src~n",
                      [RepoName]),
            AppSrcFile;
        {true, false} ->
            AppFile;
        {false, true} ->
            AppSrcFile;
        {false, false} ->
            io:format("ERROR: neither .app or .app.src exists for ~s "
                      ++ "- please resolve this~n",
                      [RepoName])
    end.

app_dependencies(RepoName) ->
    RepoPath = "./" ++ RepoName ++ "/",
    RebarConfig =   (RepoPath  ++ "rebar.config"),
    case filelib:is_file(RebarConfig) of
        true ->
            RebarDeps = rebar_deps(RebarConfig),
            [ {repo, D} || D <- RebarDeps ];
        false ->
            File = find_app_file(RepoName),
            Needs = non_otp_dependencies(File),
            NeedsStr = [ atom_to_list(A) || A <- Needs ],
            Missing = NeedsStr -- config_repos(name),
            case Missing of
                [] ->
                    [];
                _ ->
                    io:format("Missing the following applications: ~p - "
                              ++ "please add repos for them.~n",
                              [Missing]),
                    Missing
%%                    [ atom_to_list(M) || M <- Missing ]
            end
    end.

repo_map() ->
    Urls = config_repos(url),
    KVs = [ {repo_name(Url), Url} || Url <- Urls],
    orddict:from_list(KVs).
    
dependency_map() ->
    Urls = dependencies(url),
    KVs = [ {repo_name(Url), Url} || Url <- Urls],
    orddict:from_list(KVs).


non_otp_dependencies(AppFile) ->
    Terms = app_file_terms(AppFile),
    Apps = proplists:get_value(applications, Terms, []) ++
        proplists:get_value(included_applications, Terms, []),
    Apps -- otp_apps().

app_file_terms(AppFile) ->
    {ok, [{application, _, Terms}]} = file:consult(AppFile),
    Terms.


delete_dir(Dir) ->
    case filelib:is_dir(Dir) of
        false ->
            ok;
        true ->
            Cwd = cd1(Dir),
            {ok, Contents} = file:list_dir("."),
            {Dirs, Files} = lists:partition( fun filelib:is_dir/1, Contents),
            _DeleteRes = [ file:delete(File) || File <- Files],
            [ delete_dir(D) || D <- Dirs],
            ok = file:set_cwd(Cwd),
            ok = file:del_dir(Dir),
            ok
    end.

remove_repo_from_config(RepoName) ->
    Terms = config_terms(),
%%    io:format("Existing config terms: ~p~n", [Terms]),
    NewTerms = lists:filter( fun(Term) -> not repo_spec_for_repo_name(Term, RepoName) end,
                             Terms),
    %%    io:format("New config terms: ~p~n", [NewTerms]),
    SelectList = proplists:get_value(select, NewTerms, []),
    NewSelectList = lists:keydelete(RepoName, 1, SelectList),
    NewTerms2 = lists:keystore(select, 1, NewTerms, {select, NewSelectList}),
    ConfigFile = config_file(),
    {ok, File} = file:open(ConfigFile, [write]),
    write_terms(File, NewTerms2),
    ok = file:close(File),
    %% AfterWrite = config_terms(),
    %% io:format("AfterWrite: ~p~n", [AfterWrite]),
    ok.

write_terms(File, NewTerms) ->
    lists:foreach(fun (Term) -> write_term_to_file(File, Term) end,
                  NewTerms).


repo_spec_for_repo_name({repo, RepoUrl}, RepoName) ->
    repo_name(RepoUrl) == RepoName;
repo_spec_for_repo_name(_, _) ->
    false.

%% use
%% ls /usr/local/lib/erlang/lib/ | sed 's/\(.*\)-.*/\1,/'
%% to generate the list.
otp_apps() ->
    [appmon,
     asn1,
     common_test,
     compiler,
     cosEvent,
     cosEventDomain,
     cosFileTransfer,
     cosNotification,
     cosProperty,
     cosTime,
     cosTransactions,
     crypto,
     debugger,
     dialyzer,
     diameter,
     edoc,
     erl_docgen,
     erl_interface,
     erts,
     et,
     eunit,
     gs,
     hipe,
     ic,
     inets,
     inviso,
     jinterface,
     kernel,
     megaco,
     mnesia,
     observer,
     odbc,
     orber,
     os_mon,
     otp_mibs,
     parsetools,
     percept,
     pman,
     public_key,
     reltool,
     runtime_tools,
     sasl,
     snmp,
     ssh,
     ssl,
     stdlib,
     syntax_tools,
     test_server,
     toolbar,
     tools,
     tv,
     typer,
     webtool,
     wx,
     xmerl].
    
 

    
            


    


